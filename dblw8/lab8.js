// lab8.jsc

// 1. Отобразить коллекции базы данных
// Запрос для отображения всех коллекций в базе данных
db.getCollectionNames();

// 2. Вставка записей
// 2.1 Вставка одной записи в коллекцию "склады"
db.warehouses.insertOne({
    _id: 1,
    name: "Склад 1",
    address: "Улица Ленина, 1",
    capacity: 1000
});

// 2.2 Вставка нескольких записей в коллекцию "товары"
db.products.insertMany([
    { _id: 1, name: "Товар A", price: 100, category: "Категория 1" },
    { _id: 2, name: "Товар B", price: 200, category: "Категория 2" }
]);

// 2.3 Вставка нескольких записей в коллекцию "товары на складах"
db.warehouse_products.insertMany([
    { _id: 1, product_id: 1, warehouse_id: 1, quantity: 50 },
    { _id: 2, product_id: 2, warehouse_id: 1, quantity: 30 }
]);

// 2.4 Вставка одной записи в коллекцию "поставщики"
db.suppliers.insertOne({
    _id: 1,
    company_name: "Поставщик A",
    contact_person: "Иван Иванов",
    phone: "+7 (999) 123-45-67"
});

// 2.5 Вставка одной записи в коллекцию "заказы"
db.orders.insertOne({
    _id: 1,
    product_id: 1,
    quantity_ordered: 10,
    order_date: new Date("2024-11-01")
});

// 3. Удаление записей
// 3.1 Удаление одной записи по условию из коллекции "товары"
db.products.deleteOne({ _id: 1 });

// 3.2 Удаление нескольких записей по условию из коллекции "склады"
db.warehouses.deleteMany({ capacity: { $lt: 500 } });

// 3.3 Удаление всех товаров по категории из коллекции "товары"
db.products.deleteMany({ category: "Категория 2" });

// 4. Поиск записей
// 4.1 Поиск по ID в коллекции "товары"
db.products.find({ _id: 2 });

// 4.2 Поиск записи по атрибуту первого уровня в коллекции "склады"
db.warehouses.find({ name: "Склад 1" });

// 4.3 Поиск записи по вложенному атрибуту (если есть вложенные структуры)
// Пример не применим, так как вложенных атрибутов нет

// 4.4 Поиск записи по нескольким атрибутам (логический оператор AND)
db.products.find({ price: { $gt: 150 }, category: "Категория 2" });

// 4.5 Поиск записи по одному из условий (логический оператор OR)
db.products.find({ $or: [{ price: { $lt: 150 } }, { category: "Категория 1" }] });

// 4.6 Поиск с использованием оператора сравнения
db.products.find({ price: { $gte: 100 } });

// 4.7 Поиск с использованием двух операторов сравнения
db.products.find({ price: { $gt: 50, $lt: 150 } });

// Примечание о поиске по массивам:
// Для примера добавим массивы в сущности
// Например, добавим массив поставок к товарам
db.products.updateOne(
    { _id: 2 },
    { $set: { suppliers_ids: [1] } }
);

// Теперь можно искать по значению в массиве
// 4.8 Поиск по значению в массиве
db.products.find({ suppliers_ids: { $in: [1] } });

// Пример поиска по количеству элементов в массиве
// Добавим еще один товар с несколькими поставщиками
db.products.updateOne(
    { _id: 1 },
    { $set: { suppliers_ids: [1, 2] } }
);

// Теперь можно искать по количеству элементов в массиве
// Пример поиска по количеству элементов в массиве (например, товары с более чем одним поставщиком)
db.products.find({ suppliers_ids: { $size: { $gt: 1 } } });

// Пример поиска записей без атрибута
// Добавим товар без категории для примера
db.products.insertOne({
    _id: 3,
    name: "Товар C",
    price: 300
});

// Теперь можно искать товары без категории
// 4.10 Поиск записей без атрибута
db.products.find({ category: { $exists: false } });

// Обновление записей
// 5. Обновление записей
// Изменить значение атрибута у записи в коллекции "товары"
db.products.updateOne(
    { _id: 2 },
    { $set: { price: 250 } }
);

// Удалить атрибут у записи в коллекции "склады"
db.warehouses.updateOne(
    { _id: 1 },
    { $unset: { address: "" } }
);

// Добавить атрибут записи в коллекции "поставщики"
db.suppliers.updateOne(
    { _id: 1 },
    { $set: { email_address: "contact@supplierA.com" } }
);